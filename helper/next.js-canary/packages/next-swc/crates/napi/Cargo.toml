[package]
edition = "2021"
name = "next-swc-napi"
version = "0.0.0"
publish = false

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["rustls-tls"]
# Instead of enabling all the plugin-related features by default, make it explicitly specified
# when build (i.e napi --build --features plugin), same for the wasm as well.
# this is due to some of transitive dependencies have features cannot be enabled at the same time
# (i.e wasmer/default vs wasmer/js-default) while cargo merges all the features at once.
plugin = [
  "turbopack-binding/__swc_core_binding_napi_plugin",
  "turbopack-binding/__swc_core_binding_napi_plugin_filesystem_cache",
  "turbopack-binding/__swc_core_binding_napi_plugin_shared_runtime",
  "next-swc/plugin",
  "next-core/plugin",
]
sentry_native_tls = ["sentry", "sentry/native-tls", "native-tls"]
sentry_rustls = ["sentry", "sentry/rustls", "rustls-tls"]

native-tls = ["next-core/native-tls"]
rustls-tls = ["next-core/rustls-tls"]
image-webp = ["next-core/image-webp"]
image-avif = ["next-core/image-avif"]
# Enable all the available image codec support.
# Currently this is identical to `image-webp`, as we are not able to build
# other codecs easily yet.
image-extended = ["image-webp"]

# Enable dhat profiling allocator for heap profiling.
__internal_dhat-heap = ["dhat"]
# Enable dhat profiling allocator for ad hoc profiling.
# [Note]: we do not have any ad hoc event in the codebase yet, so enabling this
# effectively does nothing.
__internal_dhat-ad-hoc = ["dhat"]

[lints]
workspace = true

[dependencies]
anyhow = "1.0.66"
backtrace = "0.3"
fxhash = "0.2.1"
dhat = { workspace = true, optional = true }
napi = { version = "2", default-features = false, features = [
  "napi3",
  "serde-json",
  "tokio_rt",
  "error_anyhow",
] }
napi-derive = "2"
next-swc = { workspace = true }
next-api = { workspace = true }
next-build = { workspace = true }
next-core = { workspace = true }
turbo-tasks = { workspace = true }
once_cell = { workspace = true }
serde = "1"
serde_json = "1"
shadow-rs = { workspace = true }
tokio = { workspace = true, features = ["full"] }
tracing = { workspace = true }
tracing-futures = "0.2.5"
tracing-subscriber = { workspace = true }
tracing-chrome = "0.5.0"
turbopack-binding = { workspace = true, features = [
  "__swc_core_binding_napi",
  "__feature_node_file_trace",
  "__feature_mdx_rs",
  "__turbo",
  "__turbo_tasks",
  "__turbo_tasks_memory",
  "__turbopack",
  "__turbopack_ecmascript_hmr_protocol",
] }
url = {workspace = true}
urlencoding = {workspace = true}

[target.'cfg(not(all(target_os = "linux", target_env = "musl", target_arch = "aarch64")))'.dependencies]
turbopack-binding = { workspace = true, features = ["__turbo_tasks_malloc"] }

# There are few build targets we can't use native-tls which default features rely on,
# allow to specify alternative (rustls) instead via features.
# Note to opt in rustls default-features should be disabled
# (--no-default-features --features sentry_rustls)
sentry = { version = "0.27.0", default-features = false, features = [
  "backtrace",
  "contexts",
  "panic",
  "reqwest",
], optional = true }

[build-dependencies]
napi-build = "2"
serde = "1"
serde_json = "1"
# It is not a mistake this dependency is specified in dep / build-dep both.
shadow-rs = { workspace = true }
turbopack-binding = { workspace = true, features = ["__turbo_tasks_build"] }
